// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HUSTStudentClient is the client API for HUSTStudent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HUSTStudentClient interface {
	CreateStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error)
	UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...grpc.CallOption) (*Student, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	FindStudent(ctx context.Context, in *FindStudentRequest, opts ...grpc.CallOption) (*FindStudentResponse, error)
}

type hUSTStudentClient struct {
	cc grpc.ClientConnInterface
}

func NewHUSTStudentClient(cc grpc.ClientConnInterface) HUSTStudentClient {
	return &hUSTStudentClient{cc}
}

func (c *hUSTStudentClient) CreateStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/trytry.HUSTStudent/CreateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hUSTStudentClient) UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/trytry.HUSTStudent/UpdateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hUSTStudentClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, "/trytry.HUSTStudent/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hUSTStudentClient) FindStudent(ctx context.Context, in *FindStudentRequest, opts ...grpc.CallOption) (*FindStudentResponse, error) {
	out := new(FindStudentResponse)
	err := c.cc.Invoke(ctx, "/trytry.HUSTStudent/FindStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HUSTStudentServer is the server API for HUSTStudent service.
// All implementations must embed UnimplementedHUSTStudentServer
// for forward compatibility
type HUSTStudentServer interface {
	CreateStudent(context.Context, *Student) (*Student, error)
	UpdateStudent(context.Context, *UpdateStudentRequest) (*Student, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	FindStudent(context.Context, *FindStudentRequest) (*FindStudentResponse, error)
	mustEmbedUnimplementedHUSTStudentServer()
}

// UnimplementedHUSTStudentServer must be embedded to have forward compatible implementations.
type UnimplementedHUSTStudentServer struct {
}

func (UnimplementedHUSTStudentServer) CreateStudent(context.Context, *Student) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (UnimplementedHUSTStudentServer) UpdateStudent(context.Context, *UpdateStudentRequest) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedHUSTStudentServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedHUSTStudentServer) FindStudent(context.Context, *FindStudentRequest) (*FindStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindStudent not implemented")
}
func (UnimplementedHUSTStudentServer) mustEmbedUnimplementedHUSTStudentServer() {}

// UnsafeHUSTStudentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HUSTStudentServer will
// result in compilation errors.
type UnsafeHUSTStudentServer interface {
	mustEmbedUnimplementedHUSTStudentServer()
}

func RegisterHUSTStudentServer(s grpc.ServiceRegistrar, srv HUSTStudentServer) {
	s.RegisterService(&HUSTStudent_ServiceDesc, srv)
}

func _HUSTStudent_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HUSTStudentServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trytry.HUSTStudent/CreateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HUSTStudentServer).CreateStudent(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _HUSTStudent_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HUSTStudentServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trytry.HUSTStudent/UpdateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HUSTStudentServer).UpdateStudent(ctx, req.(*UpdateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HUSTStudent_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HUSTStudentServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trytry.HUSTStudent/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HUSTStudentServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HUSTStudent_FindStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HUSTStudentServer).FindStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trytry.HUSTStudent/FindStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HUSTStudentServer).FindStudent(ctx, req.(*FindStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HUSTStudent_ServiceDesc is the grpc.ServiceDesc for HUSTStudent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HUSTStudent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trytry.HUSTStudent",
	HandlerType: (*HUSTStudentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStudent",
			Handler:    _HUSTStudent_CreateStudent_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _HUSTStudent_UpdateStudent_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _HUSTStudent_ChangePassword_Handler,
		},
		{
			MethodName: "FindStudent",
			Handler:    _HUSTStudent_FindStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "student.proto",
}
