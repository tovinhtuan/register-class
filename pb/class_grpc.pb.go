// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HUSTClassClient is the client API for HUSTClass service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HUSTClassClient interface {
	CreateClass(ctx context.Context, in *Class, opts ...grpc.CallOption) (*Class, error)
	UpdateClass(ctx context.Context, in *Class, opts ...grpc.CallOption) (*Class, error)
	DeleteClass(ctx context.Context, in *DeleteClassRequest, opts ...grpc.CallOption) (*DeleteClassResponse, error)
}

type hUSTClassClient struct {
	cc grpc.ClientConnInterface
}

func NewHUSTClassClient(cc grpc.ClientConnInterface) HUSTClassClient {
	return &hUSTClassClient{cc}
}

func (c *hUSTClassClient) CreateClass(ctx context.Context, in *Class, opts ...grpc.CallOption) (*Class, error) {
	out := new(Class)
	err := c.cc.Invoke(ctx, "/trytry.HUSTClass/CreateClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hUSTClassClient) UpdateClass(ctx context.Context, in *Class, opts ...grpc.CallOption) (*Class, error) {
	out := new(Class)
	err := c.cc.Invoke(ctx, "/trytry.HUSTClass/UpdateClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hUSTClassClient) DeleteClass(ctx context.Context, in *DeleteClassRequest, opts ...grpc.CallOption) (*DeleteClassResponse, error) {
	out := new(DeleteClassResponse)
	err := c.cc.Invoke(ctx, "/trytry.HUSTClass/DeleteClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HUSTClassServer is the server API for HUSTClass service.
// All implementations must embed UnimplementedHUSTClassServer
// for forward compatibility
type HUSTClassServer interface {
	CreateClass(context.Context, *Class) (*Class, error)
	UpdateClass(context.Context, *Class) (*Class, error)
	DeleteClass(context.Context, *DeleteClassRequest) (*DeleteClassResponse, error)
	mustEmbedUnimplementedHUSTClassServer()
}

// UnimplementedHUSTClassServer must be embedded to have forward compatible implementations.
type UnimplementedHUSTClassServer struct {
}

func (UnimplementedHUSTClassServer) CreateClass(context.Context, *Class) (*Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClass not implemented")
}
func (UnimplementedHUSTClassServer) UpdateClass(context.Context, *Class) (*Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClass not implemented")
}
func (UnimplementedHUSTClassServer) DeleteClass(context.Context, *DeleteClassRequest) (*DeleteClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClass not implemented")
}
func (UnimplementedHUSTClassServer) mustEmbedUnimplementedHUSTClassServer() {}

// UnsafeHUSTClassServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HUSTClassServer will
// result in compilation errors.
type UnsafeHUSTClassServer interface {
	mustEmbedUnimplementedHUSTClassServer()
}

func RegisterHUSTClassServer(s grpc.ServiceRegistrar, srv HUSTClassServer) {
	s.RegisterService(&HUSTClass_ServiceDesc, srv)
}

func _HUSTClass_CreateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Class)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HUSTClassServer).CreateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trytry.HUSTClass/CreateClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HUSTClassServer).CreateClass(ctx, req.(*Class))
	}
	return interceptor(ctx, in, info, handler)
}

func _HUSTClass_UpdateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Class)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HUSTClassServer).UpdateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trytry.HUSTClass/UpdateClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HUSTClassServer).UpdateClass(ctx, req.(*Class))
	}
	return interceptor(ctx, in, info, handler)
}

func _HUSTClass_DeleteClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HUSTClassServer).DeleteClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trytry.HUSTClass/DeleteClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HUSTClassServer).DeleteClass(ctx, req.(*DeleteClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HUSTClass_ServiceDesc is the grpc.ServiceDesc for HUSTClass service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HUSTClass_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trytry.HUSTClass",
	HandlerType: (*HUSTClassServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClass",
			Handler:    _HUSTClass_CreateClass_Handler,
		},
		{
			MethodName: "UpdateClass",
			Handler:    _HUSTClass_UpdateClass_Handler,
		},
		{
			MethodName: "DeleteClass",
			Handler:    _HUSTClass_DeleteClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "class.proto",
}
